//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Xzy.UI.Core.Properties {
    using System;
    
    
    /// <summary>
    ///   一个强类型的资源类，用于查找本地化的字符串等。
    /// </summary>
    // 此类是由 StronglyTypedResourceBuilder
    // 类通过类似于 ResGen 或 Visual Studio 的工具自动生成的。
    // 若要添加或移除成员，请编辑 .ResX 文件，然后重新运行 ResGen
    // (以 /str 作为命令选项)，或重新生成 VS 项目。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   返回此类使用的缓存的 ResourceManager 实例。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Xzy.UI.Core.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   使用此强类型资源类，为所有资源查找
        ///   重写当前线程的 CurrentUICulture 属性。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   查找类似 var NanUI = NanUI || {};
        ///
        ///(function (nui) {
        ///	nui.hostWindow = {
        ///		minimize: function () {
        ///			native function Minimize();
        ///			return Minimize();
        ///		},
        ///		maximize: function () {
        ///			native function Maximize();
        ///			return Maximize();
        ///		},
        ///		restore: function () {
        ///			native function Restore();
        ///			return Restore();
        ///		},
        ///		close: function () {
        ///			native function Close();
        ///			return Close();
        ///		}
        ///	};
        ///
        ///	nui.hostWindow.__defineGetter__(&quot;currentState&quot;, function () {
        ///		native function GetWinState();
        ///		return GetWinState();
        /// [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string nanui_formExtension {
            get {
                return ResourceManager.GetString("nanui_formExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 (function () {
        ///	const ATTR_NAME = &quot;n-ui-command&quot;;
        ///
        ///	if (!window[&quot;raiseCustomEvent&quot;]) {
        ///		window[&quot;raiseCustomEvent&quot;] = function (eventName, customDetail) {
        ///			window.dispatchEvent(new CustomEvent(eventName, { detail: customDetail }));
        ///		};
        ///	}
        ///
        ///	
        ///	window.addEventListener(&quot;click&quot;, (e) =&gt; {
        ///		var targetEl = e.srcElement;
        ///
        ///		while (targetEl &amp;&amp; !targetEl.hasAttribute(ATTR_NAME)) {
        ///			targetEl = targetEl.parentElement;
        ///		}
        ///
        ///		if (targetEl) {
        ///			var cmd = targetEl.getAttribute(ATTR_NAME);
        ///
        ///			if (cmd &amp;&amp; NanUI) {
        ///		 [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string nanui_frameGlobal {
            get {
                return ResourceManager.GetString("nanui_frameGlobal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 var NanUI = NanUI || {};
        ///
        ///(function (nui) {
        ///	nui.__defineGetter__(&quot;version&quot;, function () {
        ///		native function GetVersion();
        ///		return GetVersion();
        ///	});
        ///
        ///})(NanUI); 的本地化字符串。
        /// </summary>
        internal static string nanui_nativeExtension {
            get {
                return ResourceManager.GetString("nanui_nativeExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找 System.Drawing.Bitmap 类型的本地化资源。
        /// </summary>
        internal static System.Drawing.Bitmap ShadowTemplate {
            get {
                object obj = ResourceManager.GetObject("ShadowTemplate", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
